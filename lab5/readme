Совместно с Егором Панковым

Стек:
Файлы стека хранятся в папке stack (она создается автоматически при ее отсутствии)

Дерево разбора:
Результат будет сохранен в папку с именем "tree" в текущей директории (при необходимости, как и с папкой "stack" будет создан).
При отображении упакованного дерева разбора может быть потерян порядок дочерних вершин для данной вершины из-за их большого количества. В программе они упорядочены правильно.

Входные данные:
Для выполнения программы необходим ввод грамматики (без эпсилон правил) и самого текста для парсинга (можно ввести вручную или взять из файла)
Грамматика должна находится в файле (путь к нему можно указать) и удовлетворять следующим требованиям:
- Разделение правил пробелами
- Нельзя использовать символ @ из-за особенностей реализации
В грамматике поддерживается использование '|' (или)

Запуск программы:
- `python .\program\lab5.py ...`

Аргументы программы (весь список можно получить через флаг -h)
- `-g` `-grammar` путь к файлу с грамматикой
- `-i` `--input` предложение для парсинга, токены отделяются пробелами
- `-f` `--file` путь к файлу с предложением на вход парсера

Пример запуска:
python .\program\lab5.py -g grammars/arith_grammar.txt -i "id * id + id" -a
Для чтения файла arith_grammar.txt на Linux нужно в файле lab5.py заменить в 16 строке в пути к файлу обратные слеши на обычные.

Выходные данные:
В папках stack и tree выводятся описания на языке dot, для преобразования их в картинки необходимо выполнить эту команду для Windows:
mkdir stack/images | forfiles /P stack /m "*.dot" /c "cmd /c dot -Tpng @file -o images/@fname.png"
Или можно посмотреть результат работы программы в онлайн graphviz: https://dreampuf.github.io/GraphvizOnline/

В правой панели будет отображаться результат:
Для дерева разбора это текущее состояние парсера ("sentence") и само дерево разбора
Для стека это текущая операция, номер символа и сам стек парсера

Пример для "id * id":
![Снимок](https://github.com/katuuuu/tfl/assets/108438812/2b0ea529-d3dc-4d96-8c77-2e7165113c32)
